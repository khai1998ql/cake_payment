<?php
App::uses('AppController', 'Controller');
/**
 * Users Controller
 *
 * @property User $User
 * @property PaginatorComponent $Paginator
 */
class UsersController extends AppController {

	public function login(){
		if($this->Auth->login()){
			if(AuthComponent::user('role') == 2){
				return $this->redirect('/staffs/index');
			}else{
				return $this->redirect('index');
			}

		}else{
//			$this->Session->setFlash('Tài khoản hoặc mật khẩu không đúng!');
		}
	}

	public function logout(){
		$this->Auth->logout();
		$this->redirect('/users/login');
	}
/**
 * Components
 *
 * @var array
 */
	public $components = array('Paginator');

	public function beforeFilter()
	{
//		parent::beforeFilter(); // TODO: Change the autogenerated stub
		$this->Auth->allow('add');
	}

	/**
 * index method
 *
 * @return void
 */
	public function index() {
		$this->User->recursive = 0;
		$this->set('users', $this->Paginator->paginate());
	}

/**
 * view method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
	public function view($id = null) {
		if (!$this->User->exists($id)) {
			throw new NotFoundException(__('Invalid user'));
		}
		$options = array('conditions' => array('User.' . $this->User->primaryKey => $id));
		$this->set('user', $this->User->find('first', $options));
	}

/**
 * add method
 *
 * @return void
 */
	public function add() {
		if ($this->request->is('post')) {
			$this->User->create();
			$this->request->data['User']['password'] = AuthComponent::password($this->request->data['User']['password']);
			$this->request->data['User']['role'] = 1;
			if ($this->User->save($this->request->data)) {
				$this->Session->setFlash('Tạo mới thành công!');
				return $this->redirect(array('action' => 'login'));
			} else {
				$this->Flash->error(__('Tạo tài khoản thất bại!'));
			}
		}
	}

/**
 * edit method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
	public function edit($id = null) {
		if (!$this->User->exists($id)) {
			throw new NotFoundException(__('Invalid user'));
		}
		if ($this->request->is(array('post', 'put'))) {
			if ($this->User->save($this->request->data)) {
				$this->Flash->success(__('The user has been saved.'));
				return $this->redirect(array('action' => 'index'));
			} else {
				$this->Flash->error(__('The user could not be saved. Please, try again.'));
			}
		} else {
			$options = array('conditions' => array('User.' . $this->User->primaryKey => $id));
			$this->request->data = $this->User->find('first', $options);
		}
	}

/**
 * delete method
 *
 * @throws NotFoundException
 * @param string $id
 * @return void
 */
	public function delete($id = null) {
		if (!$this->User->exists($id)) {
			throw new NotFoundException(__('Invalid user'));
		}
		$this->request->allowMethod('post', 'delete');
		if ($this->User->delete($id)) {
			$this->Flash->success(__('The user has been deleted.'));
		} else {
			$this->Flash->error(__('The user could not be deleted. Please, try again.'));
		}
		return $this->redirect(array('action' => 'index'));
	}
	public function getCustomer($phone_number){
		$this->layout = null;
		$user = $this->User->findByPhoneNumber($phone_number);

		$data_customer = array();
		if(!empty($user)){
			$data = array(
				'type' => 'success',
				'message' => 'Thêm khách hàng thành công!'
			);
			$data_customer = array(
				'user' => $user['User'],
				'user_text' => $user['User']['full_name'] . '(' . $user['User']['phone_number'] . ')',
				'data_toastr' => $data,
			);
			$this->Session->write('data.data_customer', $data_customer);
			$this->set('data', $this->Session->read('data.data_customer'));
		}else{
			$data = array(
				'type' => 'error',
				'message' => 'Khách hàng không tồn tại!'
			);
			$data_customer = array(
				'data_toastr' => $data,
			);
//			$this->Session->delete('data.data_customer');
//			$this->Session->write('data.data_customer', $data_customer);
			$this->set('data', $data_customer);
		}
//		$this->Session->write('data.data_customer', $data_customer);
//		debug($data_customer);die;

//		return json_encode($data);
//		debug($this->Session->read('data.data_customer'));
//		$this->set('data', $this->Session->read('data.data_customer'));
	}
}
